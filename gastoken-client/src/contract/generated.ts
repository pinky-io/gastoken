// Generated by @wagmi/cli@1.3.0 on 23/07/2023 at 03:49:35
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Borrower Operations
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const borrowerOperationsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_activePoolAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ActivePoolAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_borrower',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: '_GASETHFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GASETHBorrowingFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_gasPoolAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GasPoolAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_gasTokenAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GasTokenAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_newPriceFeedAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PriceFeedAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_sortedTrovesAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SortedTrovesAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_stabilityPoolAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'StabilityPoolAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_borrower',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'arrayIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TroveCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_newTroveManagerAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TroveManagerAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_borrower',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: '_debt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_coll',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'operation',
        internalType: 'enum BorrowerOperations.BorrowerOperation',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'TroveUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_borrower',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: '_debt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_coll',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'stake',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'operation',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'TroveUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BORROWING_FEE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DECIMAL_PRECISION',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MCR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MIN_NET_DEBT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NAME',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'activePool',
    outputs: [
      { name: '', internalType: 'contract IActivePool', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_upperHint', internalType: 'address', type: 'address' },
      { name: '_lowerHint', internalType: 'address', type: 'address' },
    ],
    name: 'addColl',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_collWithdrawal', internalType: 'uint256', type: 'uint256' },
      { name: '_GASETHChange', internalType: 'uint256', type: 'uint256' },
      { name: '_isDebtIncrease', internalType: 'bool', type: 'bool' },
      { name: '_upperHint', internalType: 'address', type: 'address' },
      { name: '_lowerHint', internalType: 'address', type: 'address' },
    ],
    name: 'adjustTrove',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'closeTrove',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gasToken',
    outputs: [
      { name: '', internalType: 'contract IGasToken', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEntireSystemColl',
    outputs: [
      { name: 'entireSystemColl', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEntireSystemDebt',
    outputs: [
      { name: 'entireSystemDebt', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_GASETHAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_upperHint', internalType: 'address', type: 'address' },
      { name: '_lowerHint', internalType: 'address', type: 'address' },
    ],
    name: 'openTrove',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceFeed',
    outputs: [
      { name: '', internalType: 'contract IPriceFeed', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_GASETHAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_upperHint', internalType: 'address', type: 'address' },
      { name: '_lowerHint', internalType: 'address', type: 'address' },
    ],
    name: 'repayGASETH',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_troveManagerAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_activePoolAddress', internalType: 'address', type: 'address' },
      { name: '_gasPoolAddress', internalType: 'address', type: 'address' },
      { name: '_priceFeedAddress', internalType: 'address', type: 'address' },
      {
        name: '_sortedTrovesAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_gasTokenAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setAddresses',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sortedTroves',
    outputs: [
      { name: '', internalType: 'contract ISortedTroves', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'troveManager',
    outputs: [
      { name: '', internalType: 'contract ITroveManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_collWithdrawal', internalType: 'uint256', type: 'uint256' },
      { name: '_upperHint', internalType: 'address', type: 'address' },
      { name: '_lowerHint', internalType: 'address', type: 'address' },
    ],
    name: 'withdrawColl',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_GASETHAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_upperHint', internalType: 'address', type: 'address' },
      { name: '_lowerHint', internalType: 'address', type: 'address' },
    ],
    name: 'withdrawGASETH',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hint Helpers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hintHelpersABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_sortedTrovesAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SortedTrovesAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_troveManagerAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TroveManagerAddressChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BORROWING_FEE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DECIMAL_PRECISION',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MCR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MIN_NET_DEBT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NAME',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'activePool',
    outputs: [
      { name: '', internalType: 'contract IActivePool', type: 'address' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '_coll', internalType: 'uint256', type: 'uint256' },
      { name: '_debt', internalType: 'uint256', type: 'uint256' },
      { name: '_price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeCR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '_coll', internalType: 'uint256', type: 'uint256' },
      { name: '_debt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeNominalCR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_CR', internalType: 'uint256', type: 'uint256' },
      { name: '_numTrials', internalType: 'uint256', type: 'uint256' },
      { name: '_inputRandomSeed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getApproxHint',
    outputs: [
      { name: 'hintAddress', internalType: 'address', type: 'address' },
      { name: 'diff', internalType: 'uint256', type: 'uint256' },
      { name: 'latestRandomSeed', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEntireSystemColl',
    outputs: [
      { name: 'entireSystemColl', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEntireSystemDebt',
    outputs: [
      { name: 'entireSystemDebt', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_GASETHamount', internalType: 'uint256', type: 'uint256' },
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_maxIterations', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRedemptionHints',
    outputs: [
      { name: 'firstRedemptionHint', internalType: 'address', type: 'address' },
      {
        name: 'partialRedemptionHintNICR',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'truncatedGASETHamount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceFeed',
    outputs: [
      { name: '', internalType: 'contract IPriceFeed', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_sortedTrovesAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_troveManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setAddresses',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sortedTroves',
    outputs: [
      { name: '', internalType: 'contract ISortedTroves', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'troveManager',
    outputs: [
      { name: '', internalType: 'contract ITroveManager', type: 'address' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Trove Manager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const troveManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_activePoolAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ActivePoolAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_newBorrowerOperationsAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'BorrowerOperationsAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_gasPoolAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GasPoolAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_newGasTokenAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GasTokenAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_liquidatedDebt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_liquidatedColl',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_newPriceFeedAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PriceFeedAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_attemptedGASETHAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_actualGASETHAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_ETHSent',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_ETHFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Redemption',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_sortedTrovesAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SortedTrovesAddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_borrower',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: '_newIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TroveIndexUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_borrower',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: '_debt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_coll',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_operation',
        internalType: 'enum TroveManager.TroveManagerOperation',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'TroveLiquidated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_borrower',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: '_debt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_coll',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_operation',
        internalType: 'enum TroveManager.TroveManagerOperation',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'TroveUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BORROWING_FEE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DECIMAL_PRECISION',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MCR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MIN_NET_DEBT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NAME',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REDEMPTION_FEE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'TroveOwners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'Troves',
    outputs: [
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'coll', internalType: 'uint256', type: 'uint256' },
      {
        name: 'status',
        internalType: 'enum TroveManager.Status',
        type: 'uint8',
      },
      { name: 'arrayIndex', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'activePool',
    outputs: [
      { name: '', internalType: 'contract IActivePool', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_borrower', internalType: 'address', type: 'address' }],
    name: 'addTroveOwnerToArray',
    outputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_troveArray', internalType: 'address[]', type: 'address[]' },
      { name: 'liquidator', internalType: 'address', type: 'address' },
    ],
    name: 'batchLiquidateTroves',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'borrowerOperationsAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_borrower', internalType: 'address', type: 'address' }],
    name: 'closeTrove',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_borrower', internalType: 'address', type: 'address' },
      { name: '_collDecrease', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseTroveColl',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_borrower', internalType: 'address', type: 'address' },
      { name: '_debtDecrease', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseTroveDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gasToken',
    outputs: [
      { name: '', internalType: 'contract IGasToken', type: 'address' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '_GASETHDebt', internalType: 'uint256', type: 'uint256' }],
    name: 'getBorrowingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getBorrowingRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_borrower', internalType: 'address', type: 'address' },
      { name: '_price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCurrentICR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_borrower', internalType: 'address', type: 'address' }],
    name: 'getEntireDebtAndColl',
    outputs: [
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'coll', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEntireSystemColl',
    outputs: [
      { name: 'entireSystemColl', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEntireSystemDebt',
    outputs: [
      { name: 'entireSystemDebt', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_borrower', internalType: 'address', type: 'address' }],
    name: 'getNominalICR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '_ETHDrawn', internalType: 'uint256', type: 'uint256' }],
    name: 'getRedemptionFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getRedemptionRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_price', internalType: 'uint256', type: 'uint256' }],
    name: 'getTCR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_borrower', internalType: 'address', type: 'address' }],
    name: 'getTroveColl',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_borrower', internalType: 'address', type: 'address' }],
    name: 'getTroveDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_index', internalType: 'uint256', type: 'uint256' }],
    name: 'getTroveFromTroveOwnersArray',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTroveOwnersCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_borrower', internalType: 'address', type: 'address' }],
    name: 'getTroveStatus',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_borrower', internalType: 'address', type: 'address' },
      { name: '_collIncrease', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseTroveColl',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_borrower', internalType: 'address', type: 'address' },
      { name: '_debtIncrease', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseTroveDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_borrower', internalType: 'address', type: 'address' }],
    name: 'liquidate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_n', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateTroves',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceFeed',
    outputs: [
      { name: '', internalType: 'contract IPriceFeed', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_GASETHamount', internalType: 'uint256', type: 'uint256' },
      {
        name: '_firstRedemptionHint',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_upperPartialRedemptionHint',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_lowerPartialRedemptionHint',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_partialRedemptionHintNICR',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_maxIterations', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'redeemCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_borrowerOperationsAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_activePoolAddress', internalType: 'address', type: 'address' },
      { name: '_gasPoolAddress', internalType: 'address', type: 'address' },
      { name: '_priceFeedAddress', internalType: 'address', type: 'address' },
      { name: '_gasTokenAddress', internalType: 'address', type: 'address' },
      {
        name: '_sortedTrovesAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setAddresses',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_borrower', internalType: 'address', type: 'address' },
      { name: '_num', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTroveStatus',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sortedTroves',
    outputs: [
      { name: '', internalType: 'contract ISortedTroves', type: 'address' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// El Famoso Contract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const elFamosoContractABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_fromTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_toTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BatchMetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_to', internalType: 'address', type: 'address', indexed: false },
      {
        name: '_tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_to', internalType: 'address', type: 'address', indexed: false },
      {
        name: '_value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'count', internalType: 'uint8', type: 'uint8' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdrawFunds',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'addedValue', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'subtractedValue', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'tokenId', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'operator', type: 'address', indexed: true },
      { name: 'approved', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'tokenId', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'operator', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'id', type: 'uint256' },
      { name: 'data', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', type: 'address' },
      { name: 'approved', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'tokenByIndex',
    outputs: [{ name: 'tokenId', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__.
 */
export function useBorrowerOperationsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"BORROWING_FEE"`.
 */
export function useBorrowerOperationsBorrowingFee<
  TFunctionName extends 'BORROWING_FEE',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'BORROWING_FEE',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"DECIMAL_PRECISION"`.
 */
export function useBorrowerOperationsDecimalPrecision<
  TFunctionName extends 'DECIMAL_PRECISION',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'DECIMAL_PRECISION',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"MCR"`.
 */
export function useBorrowerOperationsMcr<
  TFunctionName extends 'MCR',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'MCR',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"MIN_NET_DEBT"`.
 */
export function useBorrowerOperationsMinNetDebt<
  TFunctionName extends 'MIN_NET_DEBT',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'MIN_NET_DEBT',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"NAME"`.
 */
export function useBorrowerOperationsName<
  TFunctionName extends 'NAME',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'NAME',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"activePool"`.
 */
export function useBorrowerOperationsActivePool<
  TFunctionName extends 'activePool',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'activePool',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"gasToken"`.
 */
export function useBorrowerOperationsGasToken<
  TFunctionName extends 'gasToken',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'gasToken',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"getEntireSystemColl"`.
 */
export function useBorrowerOperationsGetEntireSystemColl<
  TFunctionName extends 'getEntireSystemColl',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'getEntireSystemColl',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"getEntireSystemDebt"`.
 */
export function useBorrowerOperationsGetEntireSystemDebt<
  TFunctionName extends 'getEntireSystemDebt',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'getEntireSystemDebt',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"isOwner"`.
 */
export function useBorrowerOperationsIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"owner"`.
 */
export function useBorrowerOperationsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"priceFeed"`.
 */
export function useBorrowerOperationsPriceFeed<
  TFunctionName extends 'priceFeed',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'priceFeed',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"sortedTroves"`.
 */
export function useBorrowerOperationsSortedTroves<
  TFunctionName extends 'sortedTroves',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'sortedTroves',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"troveManager"`.
 */
export function useBorrowerOperationsTroveManager<
  TFunctionName extends 'troveManager',
  TSelectData = ReadContractResult<typeof borrowerOperationsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof borrowerOperationsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: borrowerOperationsABI,
    functionName: 'troveManager',
    ...config,
  } as UseContractReadConfig<
    typeof borrowerOperationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__.
 */
export function useBorrowerOperationsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof borrowerOperationsABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof borrowerOperationsABI, TFunctionName, TMode>({
    abi: borrowerOperationsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"addColl"`.
 */
export function useBorrowerOperationsAddColl<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          'addColl'
        >['request']['abi'],
        'addColl',
        TMode
      > & { functionName?: 'addColl' }
    : UseContractWriteConfig<typeof borrowerOperationsABI, 'addColl', TMode> & {
        abi?: never
        functionName?: 'addColl'
      } = {} as any,
) {
  return useContractWrite<typeof borrowerOperationsABI, 'addColl', TMode>({
    abi: borrowerOperationsABI,
    functionName: 'addColl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"adjustTrove"`.
 */
export function useBorrowerOperationsAdjustTrove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          'adjustTrove'
        >['request']['abi'],
        'adjustTrove',
        TMode
      > & { functionName?: 'adjustTrove' }
    : UseContractWriteConfig<
        typeof borrowerOperationsABI,
        'adjustTrove',
        TMode
      > & {
        abi?: never
        functionName?: 'adjustTrove'
      } = {} as any,
) {
  return useContractWrite<typeof borrowerOperationsABI, 'adjustTrove', TMode>({
    abi: borrowerOperationsABI,
    functionName: 'adjustTrove',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"closeTrove"`.
 */
export function useBorrowerOperationsCloseTrove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          'closeTrove'
        >['request']['abi'],
        'closeTrove',
        TMode
      > & { functionName?: 'closeTrove' }
    : UseContractWriteConfig<
        typeof borrowerOperationsABI,
        'closeTrove',
        TMode
      > & {
        abi?: never
        functionName?: 'closeTrove'
      } = {} as any,
) {
  return useContractWrite<typeof borrowerOperationsABI, 'closeTrove', TMode>({
    abi: borrowerOperationsABI,
    functionName: 'closeTrove',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"openTrove"`.
 */
export function useBorrowerOperationsOpenTrove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          'openTrove'
        >['request']['abi'],
        'openTrove',
        TMode
      > & { functionName?: 'openTrove' }
    : UseContractWriteConfig<
        typeof borrowerOperationsABI,
        'openTrove',
        TMode
      > & {
        abi?: never
        functionName?: 'openTrove'
      } = {} as any,
) {
  return useContractWrite<typeof borrowerOperationsABI, 'openTrove', TMode>({
    abi: borrowerOperationsABI,
    functionName: 'openTrove',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"repayGASETH"`.
 */
export function useBorrowerOperationsRepayGaseth<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          'repayGASETH'
        >['request']['abi'],
        'repayGASETH',
        TMode
      > & { functionName?: 'repayGASETH' }
    : UseContractWriteConfig<
        typeof borrowerOperationsABI,
        'repayGASETH',
        TMode
      > & {
        abi?: never
        functionName?: 'repayGASETH'
      } = {} as any,
) {
  return useContractWrite<typeof borrowerOperationsABI, 'repayGASETH', TMode>({
    abi: borrowerOperationsABI,
    functionName: 'repayGASETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"setAddresses"`.
 */
export function useBorrowerOperationsSetAddresses<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          'setAddresses'
        >['request']['abi'],
        'setAddresses',
        TMode
      > & { functionName?: 'setAddresses' }
    : UseContractWriteConfig<
        typeof borrowerOperationsABI,
        'setAddresses',
        TMode
      > & {
        abi?: never
        functionName?: 'setAddresses'
      } = {} as any,
) {
  return useContractWrite<typeof borrowerOperationsABI, 'setAddresses', TMode>({
    abi: borrowerOperationsABI,
    functionName: 'setAddresses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"withdrawColl"`.
 */
export function useBorrowerOperationsWithdrawColl<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          'withdrawColl'
        >['request']['abi'],
        'withdrawColl',
        TMode
      > & { functionName?: 'withdrawColl' }
    : UseContractWriteConfig<
        typeof borrowerOperationsABI,
        'withdrawColl',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawColl'
      } = {} as any,
) {
  return useContractWrite<typeof borrowerOperationsABI, 'withdrawColl', TMode>({
    abi: borrowerOperationsABI,
    functionName: 'withdrawColl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"withdrawGASETH"`.
 */
export function useBorrowerOperationsWithdrawGaseth<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof borrowerOperationsABI,
          'withdrawGASETH'
        >['request']['abi'],
        'withdrawGASETH',
        TMode
      > & { functionName?: 'withdrawGASETH' }
    : UseContractWriteConfig<
        typeof borrowerOperationsABI,
        'withdrawGASETH',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawGASETH'
      } = {} as any,
) {
  return useContractWrite<
    typeof borrowerOperationsABI,
    'withdrawGASETH',
    TMode
  >({
    abi: borrowerOperationsABI,
    functionName: 'withdrawGASETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__.
 */
export function usePrepareBorrowerOperationsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof borrowerOperationsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof borrowerOperationsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"addColl"`.
 */
export function usePrepareBorrowerOperationsAddColl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'addColl'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    functionName: 'addColl',
    ...config,
  } as UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'addColl'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"adjustTrove"`.
 */
export function usePrepareBorrowerOperationsAdjustTrove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'adjustTrove'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    functionName: 'adjustTrove',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof borrowerOperationsABI,
    'adjustTrove'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"closeTrove"`.
 */
export function usePrepareBorrowerOperationsCloseTrove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'closeTrove'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    functionName: 'closeTrove',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof borrowerOperationsABI,
    'closeTrove'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"openTrove"`.
 */
export function usePrepareBorrowerOperationsOpenTrove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'openTrove'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    functionName: 'openTrove',
    ...config,
  } as UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'openTrove'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"repayGASETH"`.
 */
export function usePrepareBorrowerOperationsRepayGaseth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'repayGASETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    functionName: 'repayGASETH',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof borrowerOperationsABI,
    'repayGASETH'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"setAddresses"`.
 */
export function usePrepareBorrowerOperationsSetAddresses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'setAddresses'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    functionName: 'setAddresses',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof borrowerOperationsABI,
    'setAddresses'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"withdrawColl"`.
 */
export function usePrepareBorrowerOperationsWithdrawColl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof borrowerOperationsABI, 'withdrawColl'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    functionName: 'withdrawColl',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof borrowerOperationsABI,
    'withdrawColl'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link borrowerOperationsABI}__ and `functionName` set to `"withdrawGASETH"`.
 */
export function usePrepareBorrowerOperationsWithdrawGaseth(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof borrowerOperationsABI,
      'withdrawGASETH'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: borrowerOperationsABI,
    functionName: 'withdrawGASETH',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof borrowerOperationsABI,
    'withdrawGASETH'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__.
 */
export function useBorrowerOperationsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof borrowerOperationsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    ...config,
  } as UseContractEventConfig<typeof borrowerOperationsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"ActivePoolAddressChanged"`.
 */
export function useBorrowerOperationsActivePoolAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'ActivePoolAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'ActivePoolAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'ActivePoolAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"GASETHBorrowingFeePaid"`.
 */
export function useBorrowerOperationsGasethBorrowingFeePaidEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'GASETHBorrowingFeePaid'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'GASETHBorrowingFeePaid',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'GASETHBorrowingFeePaid'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"GasPoolAddressChanged"`.
 */
export function useBorrowerOperationsGasPoolAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'GasPoolAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'GasPoolAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'GasPoolAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"GasTokenAddressChanged"`.
 */
export function useBorrowerOperationsGasTokenAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'GasTokenAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'GasTokenAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'GasTokenAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBorrowerOperationsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"PriceFeedAddressChanged"`.
 */
export function useBorrowerOperationsPriceFeedAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'PriceFeedAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'PriceFeedAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'PriceFeedAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"SortedTrovesAddressChanged"`.
 */
export function useBorrowerOperationsSortedTrovesAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'SortedTrovesAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'SortedTrovesAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'SortedTrovesAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"StabilityPoolAddressChanged"`.
 */
export function useBorrowerOperationsStabilityPoolAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'StabilityPoolAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'StabilityPoolAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'StabilityPoolAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"TroveCreated"`.
 */
export function useBorrowerOperationsTroveCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof borrowerOperationsABI, 'TroveCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'TroveCreated',
    ...config,
  } as UseContractEventConfig<typeof borrowerOperationsABI, 'TroveCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"TroveManagerAddressChanged"`.
 */
export function useBorrowerOperationsTroveManagerAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof borrowerOperationsABI,
      'TroveManagerAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'TroveManagerAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof borrowerOperationsABI,
    'TroveManagerAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link borrowerOperationsABI}__ and `eventName` set to `"TroveUpdated"`.
 */
export function useBorrowerOperationsTroveUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof borrowerOperationsABI, 'TroveUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: borrowerOperationsABI,
    eventName: 'TroveUpdated',
    ...config,
  } as UseContractEventConfig<typeof borrowerOperationsABI, 'TroveUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__.
 */
export function useHintHelpersRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"BORROWING_FEE"`.
 */
export function useHintHelpersBorrowingFee<
  TFunctionName extends 'BORROWING_FEE',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'BORROWING_FEE',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"DECIMAL_PRECISION"`.
 */
export function useHintHelpersDecimalPrecision<
  TFunctionName extends 'DECIMAL_PRECISION',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'DECIMAL_PRECISION',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"MCR"`.
 */
export function useHintHelpersMcr<
  TFunctionName extends 'MCR',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'MCR',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"MIN_NET_DEBT"`.
 */
export function useHintHelpersMinNetDebt<
  TFunctionName extends 'MIN_NET_DEBT',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'MIN_NET_DEBT',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"NAME"`.
 */
export function useHintHelpersName<
  TFunctionName extends 'NAME',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'NAME',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"activePool"`.
 */
export function useHintHelpersActivePool<
  TFunctionName extends 'activePool',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'activePool',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"computeCR"`.
 */
export function useHintHelpersComputeCr<
  TFunctionName extends 'computeCR',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'computeCR',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"computeNominalCR"`.
 */
export function useHintHelpersComputeNominalCr<
  TFunctionName extends 'computeNominalCR',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'computeNominalCR',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"getApproxHint"`.
 */
export function useHintHelpersGetApproxHint<
  TFunctionName extends 'getApproxHint',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'getApproxHint',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"getEntireSystemColl"`.
 */
export function useHintHelpersGetEntireSystemColl<
  TFunctionName extends 'getEntireSystemColl',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'getEntireSystemColl',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"getEntireSystemDebt"`.
 */
export function useHintHelpersGetEntireSystemDebt<
  TFunctionName extends 'getEntireSystemDebt',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'getEntireSystemDebt',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"getRedemptionHints"`.
 */
export function useHintHelpersGetRedemptionHints<
  TFunctionName extends 'getRedemptionHints',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'getRedemptionHints',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"isOwner"`.
 */
export function useHintHelpersIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"owner"`.
 */
export function useHintHelpersOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"priceFeed"`.
 */
export function useHintHelpersPriceFeed<
  TFunctionName extends 'priceFeed',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'priceFeed',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"sortedTroves"`.
 */
export function useHintHelpersSortedTroves<
  TFunctionName extends 'sortedTroves',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'sortedTroves',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"troveManager"`.
 */
export function useHintHelpersTroveManager<
  TFunctionName extends 'troveManager',
  TSelectData = ReadContractResult<typeof hintHelpersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hintHelpersABI,
    functionName: 'troveManager',
    ...config,
  } as UseContractReadConfig<typeof hintHelpersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hintHelpersABI}__.
 */
export function useHintHelpersWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hintHelpersABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof hintHelpersABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof hintHelpersABI, TFunctionName, TMode>({
    abi: hintHelpersABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"setAddresses"`.
 */
export function useHintHelpersSetAddresses<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hintHelpersABI,
          'setAddresses'
        >['request']['abi'],
        'setAddresses',
        TMode
      > & { functionName?: 'setAddresses' }
    : UseContractWriteConfig<typeof hintHelpersABI, 'setAddresses', TMode> & {
        abi?: never
        functionName?: 'setAddresses'
      } = {} as any,
) {
  return useContractWrite<typeof hintHelpersABI, 'setAddresses', TMode>({
    abi: hintHelpersABI,
    functionName: 'setAddresses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hintHelpersABI}__.
 */
export function usePrepareHintHelpersWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hintHelpersABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hintHelpersABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hintHelpersABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hintHelpersABI}__ and `functionName` set to `"setAddresses"`.
 */
export function usePrepareHintHelpersSetAddresses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hintHelpersABI, 'setAddresses'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hintHelpersABI,
    functionName: 'setAddresses',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hintHelpersABI, 'setAddresses'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hintHelpersABI}__.
 */
export function useHintHelpersEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hintHelpersABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: hintHelpersABI,
    ...config,
  } as UseContractEventConfig<typeof hintHelpersABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hintHelpersABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useHintHelpersOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof hintHelpersABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hintHelpersABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof hintHelpersABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hintHelpersABI}__ and `eventName` set to `"SortedTrovesAddressChanged"`.
 */
export function useHintHelpersSortedTrovesAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof hintHelpersABI, 'SortedTrovesAddressChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hintHelpersABI,
    eventName: 'SortedTrovesAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof hintHelpersABI,
    'SortedTrovesAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hintHelpersABI}__ and `eventName` set to `"TroveManagerAddressChanged"`.
 */
export function useHintHelpersTroveManagerAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof hintHelpersABI, 'TroveManagerAddressChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hintHelpersABI,
    eventName: 'TroveManagerAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof hintHelpersABI,
    'TroveManagerAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__.
 */
export function useTroveManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"BORROWING_FEE"`.
 */
export function useTroveManagerBorrowingFee<
  TFunctionName extends 'BORROWING_FEE',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'BORROWING_FEE',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"DECIMAL_PRECISION"`.
 */
export function useTroveManagerDecimalPrecision<
  TFunctionName extends 'DECIMAL_PRECISION',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'DECIMAL_PRECISION',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"MCR"`.
 */
export function useTroveManagerMcr<
  TFunctionName extends 'MCR',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'MCR',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"MIN_NET_DEBT"`.
 */
export function useTroveManagerMinNetDebt<
  TFunctionName extends 'MIN_NET_DEBT',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'MIN_NET_DEBT',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"NAME"`.
 */
export function useTroveManagerName<
  TFunctionName extends 'NAME',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'NAME',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"REDEMPTION_FEE"`.
 */
export function useTroveManagerRedemptionFee<
  TFunctionName extends 'REDEMPTION_FEE',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'REDEMPTION_FEE',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"TroveOwners"`.
 */
export function useTroveManagerTroveOwners<
  TFunctionName extends 'TroveOwners',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'TroveOwners',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"Troves"`.
 */
export function useTroveManagerTroves<
  TFunctionName extends 'Troves',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'Troves',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"activePool"`.
 */
export function useTroveManagerActivePool<
  TFunctionName extends 'activePool',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'activePool',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"borrowerOperationsAddress"`.
 */
export function useTroveManagerBorrowerOperationsAddress<
  TFunctionName extends 'borrowerOperationsAddress',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'borrowerOperationsAddress',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"gasToken"`.
 */
export function useTroveManagerGasToken<
  TFunctionName extends 'gasToken',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'gasToken',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getBorrowingFee"`.
 */
export function useTroveManagerGetBorrowingFee<
  TFunctionName extends 'getBorrowingFee',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getBorrowingFee',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getBorrowingRate"`.
 */
export function useTroveManagerGetBorrowingRate<
  TFunctionName extends 'getBorrowingRate',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getBorrowingRate',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getCurrentICR"`.
 */
export function useTroveManagerGetCurrentIcr<
  TFunctionName extends 'getCurrentICR',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getCurrentICR',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getEntireDebtAndColl"`.
 */
export function useTroveManagerGetEntireDebtAndColl<
  TFunctionName extends 'getEntireDebtAndColl',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getEntireDebtAndColl',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getEntireSystemColl"`.
 */
export function useTroveManagerGetEntireSystemColl<
  TFunctionName extends 'getEntireSystemColl',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getEntireSystemColl',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getEntireSystemDebt"`.
 */
export function useTroveManagerGetEntireSystemDebt<
  TFunctionName extends 'getEntireSystemDebt',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getEntireSystemDebt',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getNominalICR"`.
 */
export function useTroveManagerGetNominalIcr<
  TFunctionName extends 'getNominalICR',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getNominalICR',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getRedemptionFee"`.
 */
export function useTroveManagerGetRedemptionFee<
  TFunctionName extends 'getRedemptionFee',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getRedemptionFee',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getRedemptionRate"`.
 */
export function useTroveManagerGetRedemptionRate<
  TFunctionName extends 'getRedemptionRate',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getRedemptionRate',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getTCR"`.
 */
export function useTroveManagerGetTcr<
  TFunctionName extends 'getTCR',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getTCR',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getTroveColl"`.
 */
export function useTroveManagerGetTroveColl<
  TFunctionName extends 'getTroveColl',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getTroveColl',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getTroveDebt"`.
 */
export function useTroveManagerGetTroveDebt<
  TFunctionName extends 'getTroveDebt',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getTroveDebt',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getTroveFromTroveOwnersArray"`.
 */
export function useTroveManagerGetTroveFromTroveOwnersArray<
  TFunctionName extends 'getTroveFromTroveOwnersArray',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getTroveFromTroveOwnersArray',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getTroveOwnersCount"`.
 */
export function useTroveManagerGetTroveOwnersCount<
  TFunctionName extends 'getTroveOwnersCount',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getTroveOwnersCount',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"getTroveStatus"`.
 */
export function useTroveManagerGetTroveStatus<
  TFunctionName extends 'getTroveStatus',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'getTroveStatus',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"isOwner"`.
 */
export function useTroveManagerIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"owner"`.
 */
export function useTroveManagerOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"priceFeed"`.
 */
export function useTroveManagerPriceFeed<
  TFunctionName extends 'priceFeed',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'priceFeed',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"sortedTroves"`.
 */
export function useTroveManagerSortedTroves<
  TFunctionName extends 'sortedTroves',
  TSelectData = ReadContractResult<typeof troveManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof troveManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: troveManagerABI,
    functionName: 'sortedTroves',
    ...config,
  } as UseContractReadConfig<
    typeof troveManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__.
 */
export function useTroveManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof troveManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, TFunctionName, TMode>({
    abi: troveManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"addTroveOwnerToArray"`.
 */
export function useTroveManagerAddTroveOwnerToArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'addTroveOwnerToArray'
        >['request']['abi'],
        'addTroveOwnerToArray',
        TMode
      > & { functionName?: 'addTroveOwnerToArray' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'addTroveOwnerToArray',
        TMode
      > & {
        abi?: never
        functionName?: 'addTroveOwnerToArray'
      } = {} as any,
) {
  return useContractWrite<
    typeof troveManagerABI,
    'addTroveOwnerToArray',
    TMode
  >({
    abi: troveManagerABI,
    functionName: 'addTroveOwnerToArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"batchLiquidateTroves"`.
 */
export function useTroveManagerBatchLiquidateTroves<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'batchLiquidateTroves'
        >['request']['abi'],
        'batchLiquidateTroves',
        TMode
      > & { functionName?: 'batchLiquidateTroves' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'batchLiquidateTroves',
        TMode
      > & {
        abi?: never
        functionName?: 'batchLiquidateTroves'
      } = {} as any,
) {
  return useContractWrite<
    typeof troveManagerABI,
    'batchLiquidateTroves',
    TMode
  >({
    abi: troveManagerABI,
    functionName: 'batchLiquidateTroves',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"closeTrove"`.
 */
export function useTroveManagerCloseTrove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'closeTrove'
        >['request']['abi'],
        'closeTrove',
        TMode
      > & { functionName?: 'closeTrove' }
    : UseContractWriteConfig<typeof troveManagerABI, 'closeTrove', TMode> & {
        abi?: never
        functionName?: 'closeTrove'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'closeTrove', TMode>({
    abi: troveManagerABI,
    functionName: 'closeTrove',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"decreaseTroveColl"`.
 */
export function useTroveManagerDecreaseTroveColl<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'decreaseTroveColl'
        >['request']['abi'],
        'decreaseTroveColl',
        TMode
      > & { functionName?: 'decreaseTroveColl' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'decreaseTroveColl',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseTroveColl'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'decreaseTroveColl', TMode>({
    abi: troveManagerABI,
    functionName: 'decreaseTroveColl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"decreaseTroveDebt"`.
 */
export function useTroveManagerDecreaseTroveDebt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'decreaseTroveDebt'
        >['request']['abi'],
        'decreaseTroveDebt',
        TMode
      > & { functionName?: 'decreaseTroveDebt' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'decreaseTroveDebt',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseTroveDebt'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'decreaseTroveDebt', TMode>({
    abi: troveManagerABI,
    functionName: 'decreaseTroveDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"increaseTroveColl"`.
 */
export function useTroveManagerIncreaseTroveColl<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'increaseTroveColl'
        >['request']['abi'],
        'increaseTroveColl',
        TMode
      > & { functionName?: 'increaseTroveColl' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'increaseTroveColl',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseTroveColl'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'increaseTroveColl', TMode>({
    abi: troveManagerABI,
    functionName: 'increaseTroveColl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"increaseTroveDebt"`.
 */
export function useTroveManagerIncreaseTroveDebt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'increaseTroveDebt'
        >['request']['abi'],
        'increaseTroveDebt',
        TMode
      > & { functionName?: 'increaseTroveDebt' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'increaseTroveDebt',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseTroveDebt'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'increaseTroveDebt', TMode>({
    abi: troveManagerABI,
    functionName: 'increaseTroveDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"liquidate"`.
 */
export function useTroveManagerLiquidate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'liquidate'
        >['request']['abi'],
        'liquidate',
        TMode
      > & { functionName?: 'liquidate' }
    : UseContractWriteConfig<typeof troveManagerABI, 'liquidate', TMode> & {
        abi?: never
        functionName?: 'liquidate'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'liquidate', TMode>({
    abi: troveManagerABI,
    functionName: 'liquidate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"liquidateTroves"`.
 */
export function useTroveManagerLiquidateTroves<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'liquidateTroves'
        >['request']['abi'],
        'liquidateTroves',
        TMode
      > & { functionName?: 'liquidateTroves' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'liquidateTroves',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateTroves'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'liquidateTroves', TMode>({
    abi: troveManagerABI,
    functionName: 'liquidateTroves',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"redeemCollateral"`.
 */
export function useTroveManagerRedeemCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'redeemCollateral'
        >['request']['abi'],
        'redeemCollateral',
        TMode
      > & { functionName?: 'redeemCollateral' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'redeemCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'redeemCollateral'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'redeemCollateral', TMode>({
    abi: troveManagerABI,
    functionName: 'redeemCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"setAddresses"`.
 */
export function useTroveManagerSetAddresses<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'setAddresses'
        >['request']['abi'],
        'setAddresses',
        TMode
      > & { functionName?: 'setAddresses' }
    : UseContractWriteConfig<typeof troveManagerABI, 'setAddresses', TMode> & {
        abi?: never
        functionName?: 'setAddresses'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'setAddresses', TMode>({
    abi: troveManagerABI,
    functionName: 'setAddresses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"setTroveStatus"`.
 */
export function useTroveManagerSetTroveStatus<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof troveManagerABI,
          'setTroveStatus'
        >['request']['abi'],
        'setTroveStatus',
        TMode
      > & { functionName?: 'setTroveStatus' }
    : UseContractWriteConfig<
        typeof troveManagerABI,
        'setTroveStatus',
        TMode
      > & {
        abi?: never
        functionName?: 'setTroveStatus'
      } = {} as any,
) {
  return useContractWrite<typeof troveManagerABI, 'setTroveStatus', TMode>({
    abi: troveManagerABI,
    functionName: 'setTroveStatus',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__.
 */
export function usePrepareTroveManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof troveManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"addTroveOwnerToArray"`.
 */
export function usePrepareTroveManagerAddTroveOwnerToArray(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof troveManagerABI,
      'addTroveOwnerToArray'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'addTroveOwnerToArray',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof troveManagerABI,
    'addTroveOwnerToArray'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"batchLiquidateTroves"`.
 */
export function usePrepareTroveManagerBatchLiquidateTroves(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof troveManagerABI,
      'batchLiquidateTroves'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'batchLiquidateTroves',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof troveManagerABI,
    'batchLiquidateTroves'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"closeTrove"`.
 */
export function usePrepareTroveManagerCloseTrove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'closeTrove'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'closeTrove',
    ...config,
  } as UsePrepareContractWriteConfig<typeof troveManagerABI, 'closeTrove'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"decreaseTroveColl"`.
 */
export function usePrepareTroveManagerDecreaseTroveColl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'decreaseTroveColl'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'decreaseTroveColl',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof troveManagerABI,
    'decreaseTroveColl'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"decreaseTroveDebt"`.
 */
export function usePrepareTroveManagerDecreaseTroveDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'decreaseTroveDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'decreaseTroveDebt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof troveManagerABI,
    'decreaseTroveDebt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"increaseTroveColl"`.
 */
export function usePrepareTroveManagerIncreaseTroveColl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'increaseTroveColl'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'increaseTroveColl',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof troveManagerABI,
    'increaseTroveColl'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"increaseTroveDebt"`.
 */
export function usePrepareTroveManagerIncreaseTroveDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'increaseTroveDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'increaseTroveDebt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof troveManagerABI,
    'increaseTroveDebt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"liquidate"`.
 */
export function usePrepareTroveManagerLiquidate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'liquidate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'liquidate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof troveManagerABI, 'liquidate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"liquidateTroves"`.
 */
export function usePrepareTroveManagerLiquidateTroves(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'liquidateTroves'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'liquidateTroves',
    ...config,
  } as UsePrepareContractWriteConfig<typeof troveManagerABI, 'liquidateTroves'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"redeemCollateral"`.
 */
export function usePrepareTroveManagerRedeemCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'redeemCollateral'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'redeemCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof troveManagerABI,
    'redeemCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"setAddresses"`.
 */
export function usePrepareTroveManagerSetAddresses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'setAddresses'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'setAddresses',
    ...config,
  } as UsePrepareContractWriteConfig<typeof troveManagerABI, 'setAddresses'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link troveManagerABI}__ and `functionName` set to `"setTroveStatus"`.
 */
export function usePrepareTroveManagerSetTroveStatus(
  config: Omit<
    UsePrepareContractWriteConfig<typeof troveManagerABI, 'setTroveStatus'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: troveManagerABI,
    functionName: 'setTroveStatus',
    ...config,
  } as UsePrepareContractWriteConfig<typeof troveManagerABI, 'setTroveStatus'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__.
 */
export function useTroveManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"ActivePoolAddressChanged"`.
 */
export function useTroveManagerActivePoolAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'ActivePoolAddressChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'ActivePoolAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof troveManagerABI,
    'ActivePoolAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"BorrowerOperationsAddressChanged"`.
 */
export function useTroveManagerBorrowerOperationsAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof troveManagerABI,
      'BorrowerOperationsAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'BorrowerOperationsAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof troveManagerABI,
    'BorrowerOperationsAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"GasPoolAddressChanged"`.
 */
export function useTroveManagerGasPoolAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'GasPoolAddressChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'GasPoolAddressChanged',
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, 'GasPoolAddressChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"GasTokenAddressChanged"`.
 */
export function useTroveManagerGasTokenAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'GasTokenAddressChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'GasTokenAddressChanged',
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, 'GasTokenAddressChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"Liquidation"`.
 */
export function useTroveManagerLiquidationEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'Liquidation'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'Liquidation',
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, 'Liquidation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useTroveManagerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"PriceFeedAddressChanged"`.
 */
export function useTroveManagerPriceFeedAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'PriceFeedAddressChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'PriceFeedAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof troveManagerABI,
    'PriceFeedAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"Redemption"`.
 */
export function useTroveManagerRedemptionEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'Redemption'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'Redemption',
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, 'Redemption'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"SortedTrovesAddressChanged"`.
 */
export function useTroveManagerSortedTrovesAddressChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof troveManagerABI,
      'SortedTrovesAddressChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'SortedTrovesAddressChanged',
    ...config,
  } as UseContractEventConfig<
    typeof troveManagerABI,
    'SortedTrovesAddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"TroveIndexUpdated"`.
 */
export function useTroveManagerTroveIndexUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'TroveIndexUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'TroveIndexUpdated',
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, 'TroveIndexUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"TroveLiquidated"`.
 */
export function useTroveManagerTroveLiquidatedEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'TroveLiquidated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'TroveLiquidated',
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, 'TroveLiquidated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link troveManagerABI}__ and `eventName` set to `"TroveUpdated"`.
 */
export function useTroveManagerTroveUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof troveManagerABI, 'TroveUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: troveManagerABI,
    eventName: 'TroveUpdated',
    ...config,
  } as UseContractEventConfig<typeof troveManagerABI, 'TroveUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__.
 */
export function useElFamosoContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useElFamosoContractBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"getApproved"`.
 */
export function useElFamosoContractGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useElFamosoContractIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"name"`.
 */
export function useElFamosoContractName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"owner"`.
 */
export function useElFamosoContractOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useElFamosoContractOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useElFamosoContractSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"symbol"`.
 */
export function useElFamosoContractSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"tokenExists"`.
 */
export function useElFamosoContractTokenExists<
  TFunctionName extends 'tokenExists',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'tokenExists',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useElFamosoContractTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useElFamosoContractTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof elFamosoContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof elFamosoContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: elFamosoContractABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof elFamosoContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__.
 */
export function useElFamosoContractWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof elFamosoContractABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof elFamosoContractABI, TFunctionName, TMode>({
    abi: elFamosoContractABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"approve"`.
 */
export function useElFamosoContractApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof elFamosoContractABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof elFamosoContractABI, 'approve', TMode>({
    abi: elFamosoContractABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"mint"`.
 */
export function useElFamosoContractMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof elFamosoContractABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof elFamosoContractABI, 'mint', TMode>({
    abi: elFamosoContractABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useElFamosoContractRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof elFamosoContractABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof elFamosoContractABI,
    'renounceOwnership',
    TMode
  >({
    abi: elFamosoContractABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useElFamosoContractSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof elFamosoContractABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof elFamosoContractABI,
    'safeTransferFrom',
    TMode
  >({
    abi: elFamosoContractABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useElFamosoContractSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof elFamosoContractABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof elFamosoContractABI,
    'setApprovalForAll',
    TMode
  >({
    abi: elFamosoContractABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useElFamosoContractTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof elFamosoContractABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof elFamosoContractABI, 'transferFrom', TMode>({
    abi: elFamosoContractABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useElFamosoContractTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof elFamosoContractABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof elFamosoContractABI,
    'transferOwnership',
    TMode
  >({
    abi: elFamosoContractABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"withdrawFunds"`.
 */
export function useElFamosoContractWithdrawFunds<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof elFamosoContractABI,
          'withdrawFunds'
        >['request']['abi'],
        'withdrawFunds',
        TMode
      > & { functionName?: 'withdrawFunds' }
    : UseContractWriteConfig<
        typeof elFamosoContractABI,
        'withdrawFunds',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawFunds'
      } = {} as any,
) {
  return useContractWrite<typeof elFamosoContractABI, 'withdrawFunds', TMode>({
    abi: elFamosoContractABI,
    functionName: 'withdrawFunds',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__.
 */
export function usePrepareElFamosoContractWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof elFamosoContractABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof elFamosoContractABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareElFamosoContractApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof elFamosoContractABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof elFamosoContractABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareElFamosoContractMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof elFamosoContractABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof elFamosoContractABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareElFamosoContractRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof elFamosoContractABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof elFamosoContractABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareElFamosoContractSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof elFamosoContractABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof elFamosoContractABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareElFamosoContractSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof elFamosoContractABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof elFamosoContractABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareElFamosoContractTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof elFamosoContractABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof elFamosoContractABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareElFamosoContractTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof elFamosoContractABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof elFamosoContractABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link elFamosoContractABI}__ and `functionName` set to `"withdrawFunds"`.
 */
export function usePrepareElFamosoContractWithdrawFunds(
  config: Omit<
    UsePrepareContractWriteConfig<typeof elFamosoContractABI, 'withdrawFunds'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: elFamosoContractABI,
    functionName: 'withdrawFunds',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof elFamosoContractABI,
    'withdrawFunds'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__.
 */
export function useElFamosoContractEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    ...config,
  } as UseContractEventConfig<typeof elFamosoContractABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__ and `eventName` set to `"Approval"`.
 */
export function useElFamosoContractApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof elFamosoContractABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useElFamosoContractApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof elFamosoContractABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__ and `eventName` set to `"BatchMetadataUpdate"`.
 */
export function useElFamosoContractBatchMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, 'BatchMetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    eventName: 'BatchMetadataUpdate',
    ...config,
  } as UseContractEventConfig<
    typeof elFamosoContractABI,
    'BatchMetadataUpdate'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__ and `eventName` set to `"MetadataUpdate"`.
 */
export function useElFamosoContractMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, 'MetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    eventName: 'MetadataUpdate',
    ...config,
  } as UseContractEventConfig<typeof elFamosoContractABI, 'MetadataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__ and `eventName` set to `"Mint"`.
 */
export function useElFamosoContractMintEvent(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof elFamosoContractABI, 'Mint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useElFamosoContractOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof elFamosoContractABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__ and `eventName` set to `"Transfer"`.
 */
export function useElFamosoContractTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof elFamosoContractABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link elFamosoContractABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useElFamosoContractWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof elFamosoContractABI, 'Withdraw'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: elFamosoContractABI,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof elFamosoContractABI, 'Withdraw'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'increaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'decreaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721TokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, TFunctionName, TMode>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'approve', TMode>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'safeTransferFrom', TMode>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'setApprovalForAll', TMode>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'transferFrom', TMode>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}
